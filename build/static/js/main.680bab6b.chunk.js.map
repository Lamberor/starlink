{"version":3,"sources":["assets/images/spacex_logo.svg","components/Header.js","components/Footer.js","components/SatSetting.js","assets/images/satellite.svg","components/SatelliteList.js","constants.js","components/WorldMap.js","components/Main.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","spacex_logo","alt","Component","Footer","href","SatSettingForm","showSatellite","e","preventDefault","props","form","validateFields","err","values","onShow","getFieldDecorator","this","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","required","message","initialValue","placeholder","min","max","style","width","type","htmlType","textAlign","SatSetting","Form","create","name","SatelliteList","onShowSatMap","onShowMap","state","selected","onChange","target","dataInfo","checked","list","addOrRemove","setState","item","status","found","some","entry","satid","filter","satList","satInfo","above","isLoad","onClick","tip","size","itemLayout","dataSource","renderItem","actions","Meta","avatar","satellite","title","satname","description","launchDate","SAT_API_KEY","height","WorldMap","track","data","hasOwnProperty","Error","len","positions","length","context2","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","fillText","d3TimeFormat","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","geoKavrayskiy7","scale","translate","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","isLoading","d3Scale","schemeCategory10","React","createRef","axios","get","then","res","feature","objects","countries","features","catch","console","log","prevProps","prevState","snapShot","satData","observerData","latitude","longitude","elevation","endTime","duration","urls","url","Promise","all","arr","ref","Main","showMap","preState","showNearbySatellite","setting","isLoadingList","fetchSatellite","altitude","response","error","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.680bab6b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spacex_logo.caf468a1.svg\";","import React, { Component } from 'react';\nimport spacex_logo from '../assets/images/spacex_logo.svg'\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <img src={spacex_logo} className=\"App-logo\" alt=\"logo\" />\n        <p className='title'>\n          Starlink Tracker\n        </p>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        ©2021 StarLink Tracker. All Rights Reserved. Website Made by <a href=\"https://github.com/Lamberor/starlink\">Cedric Lai</a>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { Form, InputNumber, Button } from 'antd';\n\nclass SatSettingForm extends Component {\n  showSatellite = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.props.onShow(values);\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 11 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 13 },\n      },\n    };\n\n    return (\n      <Form\n        {...formItemLayout}\n        className='sat-setting'\n        onSubmit={this.showSatellite}\n      >\n        <Form.Item label='Longitude(degrees)'>\n          {getFieldDecorator('longitude', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your Longitude',\n              },\n            ],\n            initialValue: 70,\n          })(\n            <InputNumber\n              placeholder='Please input Longitude'\n              min={-180}\n              max={180}\n              style={{ width: '100%' }}\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item label='Latitude(degrees)'>\n          {getFieldDecorator('latitude', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your Latitude',\n              },\n            ],\n            initialValue: -40,\n          })(\n            <InputNumber\n              placeholder='Please input Latitude'\n              min={-90}\n              max={90}\n              style={{ width: '100%' }}\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item label='Elevation(meters)'>\n          {getFieldDecorator('elevation', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your Elevation',\n              },\n            ],\n            initialValue: 100,\n          })(\n            <InputNumber\n              placeholder='Please input Elevation'\n              min={-413}\n              max={8850}\n              style={{ width: '100%' }}\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item label='Altitude(degrees)'>\n          {getFieldDecorator('altitude', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your Altitude',\n              },\n            ],\n            initialValue: 90,\n          })(\n            <InputNumber\n              placeholder='Please input Altitude'\n              min={0}\n              max={90}\n              style={{ width: '100%' }}\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item label='Duration(secs)'>\n          {getFieldDecorator('duration', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your Duration',\n              },\n            ],\n            initialValue: 10,\n          })(\n            <InputNumber\n              placeholder='Please input Duration'\n              min={0}\n              max={90}\n              style={{ width: '100%' }}\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item className='show-nearby'>\n          <Button\n            type='primary'\n            htmlType='submit'\n            style={{ textAlign: 'center' }}\n          >\n            Find Nearby Satellite\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\n// Form.create() will return a function -> A HOC\nconst SatSetting = Form.create({ name: 'satellite-setting' })(SatSettingForm);\n\nexport default SatSetting;\n","export default __webpack_public_path__ + \"static/media/satellite.4834aebe.svg\";","import React, { Component } from 'react';\nimport { Button, Spin, List, Avatar, Checkbox } from 'antd';\n\nimport satellite from '../assets/images/satellite.svg';\n\nclass SatelliteList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selected: [],\n    };\n  }\n\n  onShowSatMap = () => {\n    this.props.onShowMap(this.state.selected);\n  };\n\n  onChange = (e) => {\n    // get sat info and check status\n    const { dataInfo, checked } = e.target;\n    const { selected } = this.state;\n\n    // add or remove the sat to selected sateList\n    const list = this.addOrRemove(dataInfo, checked, selected);\n\n    // setState -> selected\n    this.setState({ selected: list });\n  };\n\n  addOrRemove = (item, status, list) => {\n    const found = list.some((entry) => entry.satid === item.satid);\n\n    // Case1: checked\n    // item not in list -> add\n    // item in list -> do nothing\n    if (status && !found) {\n      list = [...list, item];\n    }\n\n    // Case2: unchecked\n    // item not in list -> do nothing\n    // item in list -> remove\n    if (!status && found) {\n      list = list.filter((entry) => entry.satid !== item.satid);\n    }\n    return list;\n  };\n\n  render() {\n    const satList = this.props.satInfo ? this.props.satInfo.above : [];\n    const { isLoad } = this.props;\n\n    return (\n      <div className='sat-list-box'>\n        <div className='btn-container'>\n          <Button\n            className='sat-list-btn'\n            type='primary'\n            onClick={this.onShowSatMap}\n          >\n            Track on the map\n          </Button>\n        </div>\n        <hr />\n        {isLoad ? (\n          <div className='spin-box'>\n            <Spin tip='Loading...' size='large' />\n          </div>\n        ) : (\n          <List\n            className='sat-list'\n            itemLayout='horizontal'\n            dataSource={satList}\n            renderItem={(item) => (\n              <List.Item\n                actions={[\n                  <Checkbox dataInfo={item} onChange={this.onChange} />,\n                ]}\n              >\n                <List.Item.Meta\n                  avatar={<Avatar src={satellite} size='large' />}\n                  title={<p>{item.satname}</p>}\n                  description={`Launch date: ${item.launchDate}`}\n                />\n              </List.Item>\n            )}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default SatelliteList;\n","export const SAT_API_KEY = 'RMRVLM-R2VLGU-Y3JCEJ-4JYZ';\n\nexport const STARLINK_CATEGORY = '52';\n\nexport const NEARBY_SATELLITE = 'rest/v1/satellite/above';\n\nexport const WORLD_MAP_URL = 'https://unpkg.com/world-atlas@1/world/110m.json';\n\nexport const SATELLITE_POSITION_URL = 'rest/v1/satellite/positions';\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Spin } from 'antd';\nimport { feature } from 'topojson-client';\n\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport * as d3Scale from 'd3-scale';\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\n\nimport {\n  WORLD_MAP_URL,\n  SAT_API_KEY,\n  SATELLITE_POSITION_URL,\n} from '../constants';\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      isDrawing: false,\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = React.createRef();\n    this.refTrack = React.createRef();\n  }\n\n  componentDidMount() {\n    // fetch worldmap data\n    axios\n      .get(WORLD_MAP_URL)\n      .then((res) => {\n        const { data } = res;\n        //convert TopoJSON to geoJSON\n        const land = feature(data, data.objects.countries).features;\n        // generate the map\n        this.generateMap(land);\n      })\n      .catch((e) => console.log('err in fecth world map data ', e));\n  }\n\n  componentDidUpdate(prevProps, prevState, snapShot) {\n    if (prevProps.satData !== this.props.satData) {\n      // step1: get duration and lat, long... from the setting\n      const { latitude, longitude, elevation, duration } =\n        this.props.observerData;\n      const endTime = duration * 60;\n      this.setState({\n        isLoading: true,\n      });\n\n      // step2: fetch selected sat data\n      // -> Configurations -> url\n      const urls = this.props.satData.map((sat) => {\n        const { satid } = sat;\n        const url = `https://api.n2yo.com/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        return axios.get(url);\n      });\n\n      Promise.all(urls)\n        .then((res) => {\n          const arr = res.map((sat) => sat.data);\n          this.setState({\n            isLoading: false,\n            isDrawing: true,\n          });\n\n          if (!prevState.isDrawing) {\n            this.track(arr);\n          } else {\n            const oHint = document.getElementsByClassName('hint')[0];\n            oHint.innerHTML =\n              'Please wait for these satellite animation to finish before selection new ones!';\n          }\n        })\n        .catch((e) => {\n          console.log('err in fetch satellite position -> ', e.message);\n        });\n    }\n  }\n\n  track = (data) => {\n    if (!data[0].hasOwnProperty('positions')) {\n      throw new Error('no position data');\n    }\n\n    // draw\n    const len = data[0].positions.length;\n    // const { duration } = this.props.observerData;\n    const { context2 } = this.map;\n\n    let now = new Date();\n    let i = 0;\n\n    let timer = setInterval(() => {\n      let ct = new Date();\n      let timePassed = i === 0 ? 0 : ct - now;\n\n      let time = new Date(now.getTime() + 60 * timePassed);\n\n      // clear last track path\n      context2.clearRect(0, 0, width, height);\n\n      // display time\n      context2.font = 'bold 14px sans-serif';\n      context2.fillStyle = '#333';\n      context2.textAlign = 'center';\n      context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n      // case1: tracking is done\n      if (i >= len) {\n        clearInterval(timer);\n        this.setState({ isDrawing: false });\n        const oHint = document.getElementsByClassName('hint')[0];\n        oHint.innerHTML = '';\n        return;\n      }\n\n      // case2: tracking\n      data.forEach((sat) => {\n        const { info, positions } = sat;\n        this.drawSat(info, positions[i]);\n      });\n\n      i += 60;\n    }, 1000);\n  };\n\n  drawSat = (sat, pos) => {\n    const { satlongitude, satlatitude } = pos;\n    if (!satlongitude || !satlatitude) {\n      return;\n    }\n    const { satname } = sat;\n    const nameWithNumber = satname.match(/\\d+/g).join('');\n\n    const { projection, context2 } = this.map;\n    const xy = projection([satlongitude, satlatitude]);\n\n    context2.fillStyle = this.color(nameWithNumber);\n    context2.beginPath();\n    context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n    context2.fill();\n\n    context2.font = 'bold 11px sans-serif';\n    context2.textAlign = 'center';\n    context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n  };\n\n  generateMap = (land) => {\n    const projection = geoKavrayskiy7()\n      .scale(170)\n      .translate([width / 2, height / 2])\n      .precision(0.1);\n\n    const graticule = geoGraticule();\n\n    const canvas = d3Select(this.refMap.current)\n      .attr('width', width)\n      .attr('height', height);\n\n    const canvas2 = d3Select(this.refTrack.current)\n      .attr('width', width)\n      .attr('height', height);\n\n    let context = canvas.node().getContext('2d');\n    let context2 = canvas2.node().getContext('2d');\n\n    let path = geoPath().projection(projection).context(context);\n\n    land.forEach((ele) => {\n      context.fillStyle = '#B3DDEF';\n      context.strokeStyle = '#000';\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n\n      context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context2,\n    };\n  };\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <div className='map-box'>\n        {isLoading ? (\n          <div className='spinner'>\n            <Spin tip='Loading...' size='large' />\n          </div>\n        ) : null}\n        <canvas className='map' ref={this.refMap} />\n        <canvas className='track' ref={this.refTrack} />\n        <div className='hint'></div>\n      </div>\n    );\n  }\n}\n\nexport default WorldMap;\n","import React, { Component } from 'react';\nimport { Row, Col } from 'antd';\nimport axios from 'axios';\n\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport WorldMap from './WorldMap';\n\nimport { SAT_API_KEY, STARLINK_CATEGORY, NEARBY_SATELLITE } from '../constants';\n\nclass Main extends Component {\n  constructor() {\n    super();\n    this.state = {\n      setting: null,\n      satInfo: null,\n      satList: null,\n      isLoadingList: false,\n    };\n  }\n\n  showMap = (selected) => {\n    this.setState((preState) => ({\n      ...preState,\n      satList: [...selected],\n    }));\n  };\n\n  showNearbySatellite = (setting) => {\n    this.setState({ isLoadingList: true, setting: setting });\n    this.fetchSatellite(setting);\n  };\n\n  fetchSatellite = (setting) => {\n    // step1: abstract api paras from the setting\n    const { latitude, longitude, elevation, altitude } = setting;\n    // step2: send request to fetch data\n    const url = `https://api.n2yo.com/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n    // step3: add spin\n    this.setState({ isLoadingList: true });\n\n    axios\n      .get(url)\n      .then((response) => {\n        console.log(response);\n        // step4: remove spin\n        this.setState({\n          satInfo: response.data,\n          isLoadingList: false,\n        });\n      })\n      .catch((error) => {\n        console.log('err in fetch satellite -> ', error);\n        // step4: remove spin\n        this.setState({ isLoadingList: false });\n      });\n  };\n\n  render() {\n    const { satInfo, satList, setting, isLoadingList } = this.state;\n    return (\n      <Row className='main'>\n        <Col span={8} className='left-side'>\n          <SatSetting onShow={this.showNearbySatellite} />\n          <SatelliteList\n            satInfo={satInfo}\n            isLoad={isLoadingList}\n            onShowMap={this.showMap}\n          />\n        </Col>\n        <Col span={16} className='right-side'>\n          <WorldMap satData={satList} observerData={setting} />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Main from './Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}